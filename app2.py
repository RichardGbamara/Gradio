# -*- coding: utf-8 -*-
"""GRADIO LP4 PIPELINE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZF_6yXdY7LZYgp_dibUcuk7JQgp1spqy
"""

#!pip install gradio

#!pip install xgboost

import gradio as gr

import pandas as pd
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier

from google.colab import drive
drive.mount('/content/drive')

import warnings
warnings.filterwarnings("ignore")



from joblib import load

# import our test to confirm if our model works correctly
test = pd.read_csv('/content/drive/MyDrive/LP3 PROJECT /X_test.csv')

X_test = pd.read_csv('/content/drive/MyDrive/LP3 PROJECT /X_test.csv')
y_test = pd.read_csv('/content/drive/MyDrive/LP3 PROJECT /y_test.csv')

X_train = pd.read_csv('/content/drive/MyDrive/LP3 PROJECT /X_train.csv')
y_train = pd.read_csv('/content/drive/MyDrive/LP3 PROJECT /y_train.csv')

model = load('//content//drive//MyDrive//LP3 PROJECT //FinalPipeline.pkl')

# Load your dataframe
df = pd.read_csv('/content/drive/MyDrive/LP3 PROJECT /Telco-Customer-Churn.csv')

# 1. Drop specified columns
drop_columns = ['customerID', 'gender', 'PaymentMethod', 'StreamingMovies']
df = df.drop(drop_columns, axis=1)

# 2. Convert TotalCharges columns to numeric
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

# 3. Scale numeric columns
numeric_features = ['SeniorCitizen', 'MonthlyCharges', 'TotalCharges']
numeric_transformer = StandardScaler()

# 4. Encode categorical columns
categorical_features = ['Dependents', 'PhoneService', 'MultipleLines', 'InternetService',
                        'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
                        'TechSupport', 'StreamingTV', 'Contract', 'PaperlessBilling']
categorical_transformer = OneHotEncoder(sparse=False)

# 5. Encode the target column
target_column = 'Churn'
target_encoder = LabelEncoder()

# 6. Split into X and y
X = df.drop(target_column, axis=1)
y = target_encoder.fit_transform(df[target_column])

# 7. Create the pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# 8. Split data


pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', XGBClassifier())
])

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit the pipeline and make predictions
pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_test)

y_pred

df_ = pd.read_csv('/content/drive/MyDrive/LP3 PROJECT /Telco-Customer-Churn.csv')

drop_columns = ['customerID', 'gender', 'PaymentMethod', 'StreamingMovies', 'Churn']
df_ = df_.drop(drop_columns, axis=1)

df_['TotalCharges'] = pd.to_numeric(df_['TotalCharges'], errors='coerce')

df_.info()

X_test.head(0)

df_.head(0)

X_test.info()

# df_.isin(['Partner']).any().any()

# pipeline.fit_transform(df_)

y_pred2 = pipeline.predict(df_)

pipeline

# pipeline.fit_transform(X_test)

model2 = pipeline.fit(X_train, y_train)

X_test

model2.predict(X_test)

k = model2.predict(X_test)
pd.DataFrame(k).T

k[0]

"""# **GRADIO BUILD**"""

# since the output is a 0 or a 1 , we will have a classifier function to
def classifier_1(result):
    if result== 0:
        return "Customer will churn"
    else:
        return "Customer will not churn"

# Get the inputs our model will accept

for column in X_test.columns:
  print (column)

X_test.columns

# def today (x , y, z, g ):
#   user_input = [ x, y, z, g] ["x", "y", "z", "g"]

# Take in user inputs
def main_function(SeniorCitizen, Partner, Dependents, tenure, PhoneService, MultipleLines, InternetService, OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport, StreamingTV, Contract, PaperlessBilling, MonthlyCharges, TotalCharges):
    inputs = [SeniorCitizen, Partner, Dependents, tenure, PhoneService, MultipleLines, InternetService, OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport, StreamingTV, Contract, PaperlessBilling, MonthlyCharges, TotalCharges]

    input_df = pd.DataFrame([inputs], columns=['SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'Contract', 'PaperlessBilling', 'MonthlyCharges', 'TotalCharges'])

    model22 = pipeline.fit(X_train, y_train)
    pred = model22.predict(input_df)

    output = classifier_1(pred[0])

    if output == "Customer will churn":
        return [(0, output)]
    else:
        return [(1, output)]

# Define your outputs
output = gr.outputs.HighlightedText(color_map={
    "Customer will churn": "green",
    "Customer will not churn": "red"
})

X_test['TotalCharges'].min() , X_test['TotalCharges'].max()

# X_test[""].value_counts()



# Create the Gradio interface
interface = gr.Interface(
    fn=main_function,
    inputs=[
        gr.inputs.Dropdown([0, 1], label="Is the customer a senior citizen? Select 1 for YES and 0 for NO"),
        gr.inputs.Dropdown(['No', 'Yes'], label='Partner'),
        gr.inputs.Dropdown(['No', 'Yes'], label='Dependents'),
        gr.inputs.Slider(label="Tenure: How long have you been using Vodafone?"),
        gr.inputs.Dropdown(['No', 'Yes'], label='Phone Service'),
        gr.inputs.Radio(['Yes', 'No', 'No Phone service'], label="Multiple Lines"),
        gr.inputs.Dropdown(['DSL', 'Fiber optic', 'No'], label='Internet Service'),
        gr.inputs.Radio(['Yes', 'No', 'No Online Security'], label="Online Security"),
        gr.inputs.Radio(['Yes', 'No', 'Online Backup'], label="Online Backup"),
        gr.inputs.Radio(['Yes', 'No', 'No Device Protection'], label="Device Protection"),
        gr.inputs.Radio(['Yes', 'No', 'Tech Support'], label="Tech Support"),
        gr.inputs.Radio(['Yes', 'No', 'No TV streaming'], label="TV Streaming"),
        gr.inputs.Dropdown(['Month-to-month', 'One year', 'Two year'], label='Contract'),
        gr.inputs.Dropdown(['No', 'Yes'], label='Paperless Billing'),
        gr.inputs.Slider(minimum=18, maximum=120, label="Monthly Charges"),
        gr.inputs.Slider(minimum=18, maximum=8675, label="Total Charges")
    ],
    outputs= output,
    title="Team Paris Customer Churn Prediction App",
    description="Let's Get Started With Some Predictions!"
)

interface.launch()



#X_test.head()



